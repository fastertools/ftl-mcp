spin_manifest_version = 2

[application]
name = "ftl-mcp-demo"
version = "0.1.0"
authors = ["bowlofarugula <bowlofarugula@gmail.com>"]
description = "FTL MCP server for hosting MCP tools"

[variables]
tool_components = { default = "echo-rs,echo-ts,weather-rs,weather-ts" }
# ========================================
# Available auth provider configurations
# ========================================

# AuthKit:
# {
#   "type": "authkit",
#   "issuer": "https://your-tenant.authkit.app",
#   "audience": "mcp-api"  // optional
# }

# Generic OIDC (Auth0, Keycloak, etc):
# {
#   "type": "oidc",
#   "name": "auth0",
#   "issuer": "https://your-domain.auth0.com",
#   "jwks_uri": "https://your-domain.auth0.com/.well-known/jwks.json",
#   "authorization_endpoint": "https://your-domain.auth0.com/authorize",
#   "token_endpoint": "https://your-domain.auth0.com/oauth/token",
#   "userinfo_endpoint": "https://your-domain.auth0.com/userinfo",  // optional
#   "audience": "your-api-identifier",  // optional
#   "allowed_domains": ["*.auth0.com"]  // optional
# }
# Auth gateway configuration - auth is DISABLED by default
# To enable auth, set SPIN_VARIABLE_AUTH_CONFIG with your auth configuration or edit the block below.
auth_config = { default = '''
{
  "mcp_gateway_url": "http://ftl-mcp-gateway.spin.internal/mcp-internal",
  "trace_id_header": "X-Trace-Id",
  "enabled": false,
  "providers": []
}
''' }

# Main MCP endpoint - uses auth gateway which can be disabled via auth_config
[[trigger.http]]
route = "/mcp"
component = "mcp"

[[trigger.http]]
route = "/.well-known/oauth-protected-resource"
component = "mcp"

[[trigger.http]]
route = "/.well-known/oauth-authorization-server"
component = "mcp"

[component.mcp]
source = { registry = "ghcr.io", package = "fastertools:ftl-auth-gateway", version = "0.0.4" }
allowed_outbound_hosts = ["http://*.spin.internal", "https://*.authkit.app"]
[component.mcp.variables]
auth_config = "{{ auth_config }}"

# MCP Gateway - internal endpoint
[[trigger.http]]
route = { private = true }
component = "ftl-mcp-gateway"

[component.ftl-mcp-gateway]
source = { registry = "ghcr.io", package = "fastertools:ftl-mcp-gateway", version = "0.0.3" }
allowed_outbound_hosts = ["http://*.spin.internal"]
[component.ftl-mcp-gateway.variables]
tool_components = "{{ tool_components }}"
validate_arguments = "true"

# Echo tool (Rust)
[[trigger.http]]
route = { private = true }
component = "echo-rs"

[component.echo-rs]
source = "echo-rs/target/wasm32-wasip1/release/echo_rs.wasm"
allowed_outbound_hosts = []
[component.echo-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
workdir = "echo-rs"
watch = ["src/**/*.rs", "Cargo.toml"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "echo-rs"
# Example: tool_components = { default = "existing-tool,echo-rs" }

# Echo tool (TypeScript)
[[trigger.http]]
route = { private = true }
component = "echo-ts"

[component.echo-ts]
source = "echo-ts/dist/echo-ts.wasm"
allowed_outbound_hosts = []
[component.echo-ts.build]
command = "npm install && npm run build"
workdir = "echo-ts"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "echo-ts"
# Example: tool_components = { default = "existing-tool,echo-ts" }

# Weather tool (Rust)
[[trigger.http]]
route = { private = true }
component = "weather-rs"

[component.weather-rs]
source = "weather-rs/target/wasm32-wasip1/release/weather_rs.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]
[component.weather-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
workdir = "weather-rs"
watch = ["src/**/*.rs", "Cargo.toml"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "weather-rs"
# Example: tool_components = { default = "existing-tool,weather-rs" }

# Weather tool (TypeScript)
[[trigger.http]]
route = { private = true }
component = "weather-ts"

[component.weather-ts]
source = "weather-ts/dist/weather-ts.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]
[component.weather-ts.build]
command = "npm install && npm run build"
workdir = "weather-ts"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# IMPORTANT: After adding this component, update the tool_components variable
# in the [variables] section at the top of spin.toml to include "weather-ts"
# Example: tool_components = { default = "existing-tool,weather-ts" }