spin_manifest_version = 2

[application]
name = "ftl-mcp-demo"
version = "0.1.0"
authors = ["bowlofarugula <bowlofarugula@gmail.com>"]
description = "FTL MCP server for hosting MCP tools with authentication"

[variables]
tool_components = { default = "echo-rs,echo-ts,weather-rs,weather-ts" }
authkit_issuer = { required = true }

# Auth Gateway - handles authentication and OAuth discovery
[[trigger.http]]
route = "/..."
component = "ftl-auth-gateway"

[component.ftl-auth-gateway]
source = { registry = "ghcr.io", package = "fastertools:ftl-auth-gateway", version = "0.0.2" }
allowed_outbound_hosts = ["http://*.spin.internal", "https://*.authkit.app"]
[component.ftl-auth-gateway.variables]
auth_config = '''
{
  "mcp_gateway_url": "http://ftl-mcp-gateway.spin.internal/mcp-internal",
  "trace_id_header": "X-Trace-Id",
  "providers": [{
    "type": "auth_kit",
    "issuer": "{{ authkit_issuer }}"
  }]
}
'''

# MCP Gateway - internal endpoint (protected by auth gateway)
[[trigger.http]]
route = "/mcp-internal"
component = "ftl-mcp-gateway"

[component.ftl-mcp-gateway]
source = { registry = "ghcr.io", package = "fastertools:ftl-mcp-gateway", version = "0.0.3" }
allowed_outbound_hosts = ["http://*.spin.internal"]
[component.ftl-mcp-gateway.variables]
tool_components = "{{ tool_components }}"
validate_arguments = "true"

# Echo tool (Rust)
[[trigger.http]]
route = "/echo-rs"
component = "echo-rs"

[component.echo-rs]
source = "echo-rs/target/wasm32-wasip1/release/echo_rs.wasm"
allowed_outbound_hosts = []
[component.echo-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
workdir = "echo-rs"
watch = ["src/**/*.rs", "Cargo.toml"]

# Echo tool (TypeScript)
[[trigger.http]]
route = "/echo-ts"
component = "echo-ts"

[component.echo-ts]
source = "echo-ts/dist/echo-ts.wasm"
allowed_outbound_hosts = []
[component.echo-ts.build]
command = "npm install && npm run build"
workdir = "echo-ts"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]

# Weather tool (Rust)
[[trigger.http]]
route = "/weather-rs"
component = "weather-rs"

[component.weather-rs]
source = "weather-rs/target/wasm32-wasip1/release/weather_rs.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]
[component.weather-rs.build]
command = "cargo build --target wasm32-wasip1 --release"
workdir = "weather-rs"
watch = ["src/**/*.rs", "Cargo.toml"]

# Weather tool (TypeScript)
[[trigger.http]]
route = "/weather-ts"
component = "weather-ts"

[component.weather-ts]
source = "weather-ts/dist/weather-ts.wasm"
allowed_outbound_hosts = ["https://geocoding-api.open-meteo.com", "https://api.open-meteo.com"]
[component.weather-ts.build]
command = "npm install && npm run build"
workdir = "weather-ts"
watch = ["src/**/*.ts", "package.json", "tsconfig.json"]